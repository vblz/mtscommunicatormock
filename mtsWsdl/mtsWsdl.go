// Code generated by gowsdl DO NOT EDIT.

package mtsWsdl

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type DeliveryStatus string

const (
	DeliveryStatusPending DeliveryStatus = "Pending"

	DeliveryStatusSending DeliveryStatus = "Sending"

	DeliveryStatusSent DeliveryStatus = "Sent"

	DeliveryStatusNotSent DeliveryStatus = "NotSent"

	DeliveryStatusDelivered DeliveryStatus = "Delivered"

	DeliveryStatusNotDelivered DeliveryStatus = "NotDelivered"

	DeliveryStatusTimedOut DeliveryStatus = "TimedOut"

	DeliveryStatusError DeliveryStatus = "Error"

	DeliveryStatusCancelled DeliveryStatus = "Cancelled"
)

type RequestMessageType string

const (
	RequestMessageTypeAll RequestMessageType = "All"

	RequestMessageTypeMO RequestMessageType = "MO"

	RequestMessageTypeMT RequestMessageType = "MT"
)

type MessageType string

const (
	MessageTypeMO MessageType = "MO"

	MessageTypeMT MessageType = "MT"

	MessageTypeMailing MessageType = "Mailing"
)

type AccessLevel string

const (
	AccessLevelAdministrator AccessLevel = "Administrator"

	AccessLevelOperator AccessLevel = "Operator"

	AccessLevelBaseUser AccessLevel = "BaseUser"
)

type SendMessage struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessage"`

	Msid string `xml:"msid,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessageResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageResponse"`

	SendMessageResult int64 `xml:"SendMessageResult,omitempty"`
}

type SendMessageAtDate struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageAtDate"`

	Msid string `xml:"msid,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ScheduledSendDate time.Time `xml:"scheduledSendDate,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessageAtDateResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageAtDateResponse"`

	SendMessageAtDateResult int64 `xml:"SendMessageAtDateResult,omitempty"`
}

type SendMessageWithValidityPeriod struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageWithValidityPeriod"`

	Msid string `xml:"msid,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ValidityPeriod string `xml:"validityPeriod,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessageWithValidityPeriodResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageWithValidityPeriodResponse"`

	SendMessageWithValidityPeriodResult int64 `xml:"SendMessageWithValidityPeriodResult,omitempty"`
}

type SendMessageToMultipleSubscribers struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageToMultipleSubscribers"`

	Msids *ArrayOfString `xml:"msids,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessageToMultipleSubscribersResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageToMultipleSubscribersResponse"`

	SendMessageToMultipleSubscribersResult *ArrayOfSendMessageIDs `xml:"SendMessageToMultipleSubscribersResult,omitempty"`
}

type SendMessageToMultipleSubscribersAtDate struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageToMultipleSubscribersAtDate"`

	Msids *ArrayOfString `xml:"msids,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ScheduledSendDate time.Time `xml:"scheduledSendDate,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessageToMultipleSubscribersAtDateResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessageToMultipleSubscribersAtDateResponse"`

	SendMessageToMultipleSubscribersAtDateResult *ArrayOfSendMessageIDs `xml:"SendMessageToMultipleSubscribersAtDateResult,omitempty"`
}

type SendMessages struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessages"`

	Msids *ArrayOfString `xml:"msids,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessagesResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesResponse"`

	SendMessagesResult *ArrayOfSendMessageIDs `xml:"SendMessagesResult,omitempty"`
}

type SendMessagesAtDate struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesAtDate"`

	Msids *ArrayOfString `xml:"msids,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ScheduledSendDate time.Time `xml:"scheduledSendDate,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessagesAtDateResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesAtDateResponse"`

	SendMessagesAtDateResult *ArrayOfSendMessageIDs `xml:"SendMessagesAtDateResult,omitempty"`
}

type SendMessagesWithValidityPeriod struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesWithValidityPeriod"`

	Msids *ArrayOfString `xml:"msids,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	Login string `xml:"login,omitempty"`

	ValidityPeriod string `xml:"validityPeriod,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessagesWithValidityPeriodResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesWithValidityPeriodResponse"`

	SendMessagesWithValidityPeriodResult *ArrayOfSendMessageIDs `xml:"SendMessagesWithValidityPeriodResult,omitempty"`
}

type SendMessagesAtDateWithValidityPeriod struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesAtDateWithValidityPeriod"`

	Msids *ArrayOfString `xml:"msids,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ScheduledSendDate time.Time `xml:"scheduledSendDate,omitempty"`

	ValidityPeriod string `xml:"validityPeriod,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessagesAtDateWithValidityPeriodResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesAtDateWithValidityPeriodResponse"`

	SendMessagesAtDateWithValidityPeriodResult *ArrayOfSendMessageIDs `xml:"SendMessagesAtDateWithValidityPeriodResult,omitempty"`
}

type SendVariousMessages struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendVariousMessages"`

	MsidsAndMessages *ArrayOfSubmit `xml:"msidsAndMessages,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ScheduledSendDate string `xml:"scheduledSendDate,omitempty"`

	ValidityPeriod string `xml:"validityPeriod,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendVariousMessagesResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendVariousMessagesResponse"`

	SendVariousMessagesResult *ArrayOfSendMessageIDs `xml:"SendVariousMessagesResult,omitempty"`
}

type SendViberMessages struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendViberMessages"`

	MsidsAndMessages *ArrayOfSubmit `xml:"msidsAndMessages,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ScheduledSendDate string `xml:"scheduledSendDate,omitempty"`

	ValidityPeriod string `xml:"validityPeriod,omitempty"`

	UseViberOnly bool `xml:"useViberOnly,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendViberMessagesResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendViberMessagesResponse"`

	SendViberMessagesResult *ArrayOfSendMessageIDs `xml:"SendViberMessagesResult,omitempty"`
}

type SendViberMessagesWithFallback struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendViberMessagesWithFallback"`

	MsidsAndMessages *ArrayOfViberSubmit `xml:"msidsAndMessages,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ScheduledSendDate string `xml:"scheduledSendDate,omitempty"`

	ValidityPeriod string `xml:"validityPeriod,omitempty"`

	UseViberOnly bool `xml:"useViberOnly,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendViberMessagesWithFallbackResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendViberMessagesWithFallbackResponse"`

	SendViberMessagesWithFallbackResult *ArrayOfSendMessageIDs `xml:"SendViberMessagesWithFallbackResult,omitempty"`
}

type SendMessagesWithForm struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesWithForm"`

	FormSubmits *ArrayOfFormSubmit `xml:"FormSubmits,omitempty"`

	Message string `xml:"message,omitempty"`

	Naming string `xml:"naming,omitempty"`

	FormTemplateID int64 `xml:"formTemplateID,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SendMessagesWithFormResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SendMessagesWithFormResponse"`

	SendMessagesWithFormResult *ArrayOfSendMessageIDs `xml:"SendMessagesWithFormResult,omitempty"`
}

type GetMessageStatus struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessageStatus"`

	MessageID int64 `xml:"messageID,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetMessageStatusResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessageStatusResponse"`

	GetMessageStatusResult *ArrayOfDeliveryInfo `xml:"GetMessageStatusResult,omitempty"`
}

type GetMessagesStatus struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessagesStatus"`

	MessageIDs *ArrayOfLong `xml:"messageIDs,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetMessagesStatusResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessagesStatusResponse"`

	GetMessagesStatusResult *ArrayOfMessageStatusWithID `xml:"GetMessagesStatusResult,omitempty"`
}

type GetViberMessagesStatus struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetViberMessagesStatus"`

	MessageIDs *ArrayOfLong `xml:"messageIDs,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetViberMessagesStatusResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetViberMessagesStatusResponse"`

	GetViberMessagesStatusResult *ArrayOfViberMessageStatusWithID `xml:"GetViberMessagesStatusResult,omitempty"`
}

type GetMessagesInfo struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessagesInfo"`

	MessageIDs *ArrayOfLong `xml:"messageIDs,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetMessagesInfoResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessagesInfoResponse"`

	GetMessagesInfoResult *ArrayOfMessageInfoExWithID `xml:"GetMessagesInfoResult,omitempty"`
}

type GetMessages struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessages"`

	MessageType *RequestMessageType `xml:"messageType,omitempty"`

	SubscriberMsids *ArrayOfString `xml:"subscriberMsids,omitempty"`

	DateFrom TimeWithoutZone `xml:"DateFrom,omitempty"`

	DateTo TimeWithoutZone `xml:"DateTo,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetMessagesResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMessagesResponse"`

	GetMessagesResult *ArrayOfMessageInfo `xml:"GetMessagesResult,omitempty"`
}

type GetStatistics struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetStatistics"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetStatisticsResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetStatisticsResponse"`

	GetStatisticsResult *StatisticsInfo `xml:"GetStatisticsResult,omitempty"`
}

type CreateMailingList struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M CreateMailingList"`

	Name string `xml:"name,omitempty"`

	Contacts *ArrayOfMailingListContact `xml:"contacts,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type CreateMailingListResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M CreateMailingListResponse"`

	CreateMailingListResult int64 `xml:"CreateMailingListResult,omitempty"`
}

type GetMailingLists struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMailingLists"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetMailingListsResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMailingListsResponse"`

	GetMailingListsResult *ArrayOfResultMailingList `xml:"GetMailingListsResult,omitempty"`
}

type DeleteMailingLists struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M DeleteMailingLists"`

	MailingListIDs *ArrayOfLong `xml:"mailingListIDs,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type DeleteMailingListsResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M DeleteMailingListsResponse"`
}

type GetMailingListContacts struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMailingListContacts"`

	MailingListId int64 `xml:"mailingListId,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetMailingListContactsResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMailingListContactsResponse"`

	GetMailingListContactsResult *ArrayOfMailingListContact `xml:"GetMailingListContactsResult,omitempty"`
}

type SetMailingListContacts struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SetMailingListContacts"`

	MailingListId int64 `xml:"mailingListId,omitempty"`

	Contacts *ArrayOfMailingListContact `xml:"contacts,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type SetMailingListContactsResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M SetMailingListContactsResponse"`
}

type AddUser struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M AddUser"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`

	UserName string `xml:"userName,omitempty"`

	UserMSID string `xml:"userMSID,omitempty"`

	UserEmail string `xml:"userEmail,omitempty"`

	WebAccessEnabled bool `xml:"webAccessEnabled,omitempty"`

	AccessLevel *AccessLevel `xml:"accessLevel,omitempty"`

	UserGroupId int64 `xml:"userGroupId,omitempty"`
}

type AddUserResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M AddUserResponse"`

	AddUserResult int64 `xml:"AddUserResult,omitempty"`
}

type GetGroups struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetGroups"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetGroupsResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetGroupsResponse"`

	GetGroupsResult *ArrayOfSubscriberGroupInfo `xml:"GetGroupsResult,omitempty"`
}

type GetUsers struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetUsers"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetUsersResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetUsersResponse"`

	GetUsersResult *ArrayOfUserInfo `xml:"GetUsersResult,omitempty"`
}

type DeleteUser struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M DeleteUser"`

	Msid string `xml:"msid,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type DeleteUserResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M DeleteUserResponse"`
}

type CreateMailing struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M CreateMailing"`

	Name string `xml:"name,omitempty"`

	MailingListID int64 `xml:"mailingListID,omitempty"`

	Text string `xml:"text,omitempty"`

	Date string `xml:"date,omitempty"`

	Naming string `xml:"naming,omitempty"`

	ValidityPeriod string `xml:"validityPeriod,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type CreateMailingResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M CreateMailingResponse"`

	CreateMailingResult int64 `xml:"CreateMailingResult,omitempty"`
}

type GetMailingMessagesStatus struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMailingMessagesStatus"`

	MailingID int64 `xml:"mailingID,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetMailingMessagesStatusResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetMailingMessagesStatusResponse"`

	GetMailingMessagesStatusResult *ArrayOfDeliveryInfo `xml:"GetMailingMessagesStatusResult,omitempty"`
}

type GetCompanyMode struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetCompanyMode"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetCompanyModeResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetCompanyModeResponse"`

	GetCompanyModeResult string `xml:"GetCompanyModeResult,omitempty"`
}

type GetBalance struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetBalance"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetBalanceResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetBalanceResponse"`

	GetBalanceResult string `xml:"GetBalanceResult,omitempty"`
}

type GetPartCount struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetPartCount"`

	Text string `xml:"text,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetPartCountResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetPartCountResponse"`

	GetPartCountResult int32 `xml:"GetPartCountResult,omitempty"`
}

type GetFormTemplates struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetFormTemplates"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetFormTemplatesResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetFormTemplatesResponse"`

	GetFormTemplatesResult *ArrayOfFormTemplate `xml:"GetFormTemplatesResult,omitempty"`
}

type GetForms struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetForms"`

	From time.Time `xml:"from,omitempty"`

	To time.Time `xml:"to,omitempty"`

	FormTemplateID int64 `xml:"formTemplateID,omitempty"`

	Login string `xml:"login,omitempty"`

	Password string `xml:"password,omitempty"`
}

type GetFormsResponse struct {
	XMLName xml.Name `xml:"http://mcommunicator.ru/M2M GetFormsResponse"`

	GetFormsResult *ArrayOfForm `xml:"GetFormsResult,omitempty"`
}

type Long int64

//type ArrayOfSendMessageIDs ArrayOfSendMessageIDs
//
//type ArrayOfDeliveryInfo ArrayOfDeliveryInfo
//
//type ArrayOfMessageStatusWithID ArrayOfMessageStatusWithID
//
//type ArrayOfViberMessageStatusWithID ArrayOfViberMessageStatusWithID
//
//type ArrayOfMessageInfoExWithID ArrayOfMessageInfoExWithID
//
//type ArrayOfMessageInfo ArrayOfMessageInfo
//
//type StatisticsInfo StatisticsInfo
//
//type ArrayOfResultMailingList ArrayOfResultMailingList
//
//type ArrayOfMailingListContact ArrayOfMailingListContact
//
//type ArrayOfSubscriberGroupInfo ArrayOfSubscriberGroupInfo
//
//type ArrayOfUserInfo ArrayOfUserInfo
//
//type string string
//
//type int int32
//
//type ArrayOfFormTemplate ArrayOfFormTemplate
//
//type ArrayOfForm ArrayOfForm

type ArrayOfString struct {
	String []string `xml:"string,omitempty"`
}

type ArrayOfSendMessageIDs struct {
	SendMessageIDs []*SendMessageIDs `xml:"SendMessageIDs,omitempty"`
}

type SendMessageIDs struct {
	Msid string `xml:"Msid,omitempty"`

	MessageID int64 `xml:"MessageID,omitempty"`
}

type ArrayOfSubmit struct {
	Submit []*Submit `xml:"Submit,omitempty"`
}

type Submit struct {
	Msid string `xml:"Msid,omitempty"`

	Message string `xml:"Message,omitempty"`
}

type ArrayOfViberSubmit struct {
	ViberSubmit []*ViberSubmit `xml:"ViberSubmit,omitempty"`
}

type ViberSubmit struct {
	Msid string `xml:"Msid,omitempty"`

	Message string `xml:"Message,omitempty"`

	FallbackMessage string `xml:"FallbackMessage,omitempty"`
}

type ArrayOfFormSubmit struct {
	FormSubmit []*FormSubmit `xml:"FormSubmit,omitempty"`
}

type FormSubmit struct {
	Msid string `xml:"Msid,omitempty"`
}

type ArrayOfDeliveryInfo struct {
	DeliveryInfo []*DeliveryInfo `xml:"DeliveryInfo,omitempty"`
}

type DeliveryInfo struct {
	Msid string `xml:"Msid,omitempty"`

	DeliveryStatus *DeliveryStatus `xml:"DeliveryStatus,omitempty"`

	DeliveryDate time.Time `xml:"DeliveryDate,omitempty"`

	UserDeliveryDate time.Time `xml:"UserDeliveryDate,omitempty"`

	PartCount int32 `xml:"PartCount,omitempty"`
}

type ArrayOfLong struct {
	Long []int64 `xml:"long,omitempty"`
}

type ArrayOfMessageStatusWithID struct {
	MessageStatusWithID []*MessageStatusWithID `xml:"MessageStatusWithID,omitempty"`
}

type MessageStatusWithID struct {
	MessageID int64 `xml:"MessageID,omitempty"`

	Delivery *ArrayOfDeliveryInfo `xml:"Delivery,omitempty"`
}

type ArrayOfViberMessageStatusWithID struct {
	ViberMessageStatusWithID []*ViberMessageStatusWithID `xml:"ViberMessageStatusWithID,omitempty"`
}

type ViberMessageStatusWithID struct {
	MessageID int64 `xml:"MessageID,omitempty"`

	Delivery *ArrayOfViberDeliveryInfo `xml:"Delivery,omitempty"`
}

type ArrayOfViberDeliveryInfo struct {
	ViberDeliveryInfo []*ViberDeliveryInfo `xml:"ViberDeliveryInfo,omitempty"`
}

type ViberDeliveryInfo struct {
	*DeliveryInfo

	ViberStatus string `xml:"ViberStatus,omitempty"`
}

type ArrayOfMessageInfoExWithID struct {
	MessageInfoExWithID []*MessageInfoExWithID `xml:"MessageInfoExWithID,omitempty"`
}

type MessageInfoExWithID struct {
	MessageID int64 `xml:"MessageID,omitempty"`

	MessageInfo *ArrayOfMessageInfoEx `xml:"MessageInfo,omitempty"`
}

type ArrayOfMessageInfoEx struct {
	MessageInfoEx []*MessageInfoEx `xml:"MessageInfoEx,omitempty"`
}

type MessageInfoEx struct {
	*DeliveryInfo

	TrafficPatternType string `xml:"TrafficPatternType,omitempty"`

	Cost string `xml:"Cost,omitempty"`
}

type ArrayOfMessageInfo struct {
	MessageInfo []*MessageInfo `xml:"MessageInfo,omitempty"`
}

type MessageInfo struct {
	MessageID int64 `xml:"MessageID,omitempty"`

	CreationDate TimeWithoutZone `xml:"CreationDate,omitempty"`

	SenderMsid string `xml:"SenderMsid,omitempty"`

	SenderName string `xml:"SenderName,omitempty"`

	DeliveryInfo *ArrayOfDeliveryInfoExt `xml:"DeliveryInfo,omitempty"`

	MessageType *MessageType `xml:"MessageType,omitempty"`

	MessageText string `xml:"MessageText,omitempty"`
}

type ArrayOfDeliveryInfoExt struct {
	DeliveryInfoExt []*DeliveryInfoExt `xml:"DeliveryInfoExt,omitempty"`
}

type DeliveryInfoExt struct {
	TargetMsid string `xml:"TargetMsid,omitempty"`

	DeliveryStatus *DeliveryStatus `xml:"DeliveryStatus,omitempty"`

	DeliveryDate time.Time `xml:"DeliveryDate,omitempty"`

	TargetName string `xml:"TargetName,omitempty"`

	UserDeliveryDate time.Time `xml:"UserDeliveryDate,omitempty"`
}

type StatisticsInfo struct {
	Year int32 `xml:"Year,omitempty"`

	Month byte `xml:"Month,omitempty"`

	PacketSize int32 `xml:"PacketSize,omitempty"`

	IncludedSMS int32 `xml:"IncludedSMS,omitempty"`

	ExtraSMS int32 `xml:"ExtraSMS,omitempty"`

	Remainder int32 `xml:"Remainder,omitempty"`

	ExternalPacketSize int32 `xml:"ExternalPacketSize,omitempty"`

	ExternalIncludedSms int32 `xml:"ExternalIncludedSms,omitempty"`

	ExternalExtraSms int32 `xml:"ExternalExtraSms,omitempty"`

	ExternalReminder int32 `xml:"ExternalReminder,omitempty"`

	GeneralPacketSize int32 `xml:"GeneralPacketSize,omitempty"`

	GeneralIncludedSms int32 `xml:"GeneralIncludedSms,omitempty"`

	GeneralExtraSms int32 `xml:"GeneralExtraSms,omitempty"`

	GeneralReminder int32 `xml:"GeneralReminder,omitempty"`

	MTSRemainder int32 `xml:"MTSRemainder,omitempty"`

	MegafonRemainder int32 `xml:"MegafonRemainder,omitempty"`

	BeelineRemainder int32 `xml:"BeelineRemainder,omitempty"`

	RostelecomRemainder int32 `xml:"RostelecomRemainder,omitempty"`

	Tele2Remainder int32 `xml:"Tele2Remainder,omitempty"`

	MotivRemainder int32 `xml:"MotivRemainder,omitempty"`

	MtsTransactional int32 `xml:"MtsTransactional,omitempty"`

	MegafonTransactional int32 `xml:"MegafonTransactional,omitempty"`

	BeelineTransactional int32 `xml:"BeelineTransactional,omitempty"`

	Tele2Transactional int32 `xml:"Tele2Transactional,omitempty"`

	MtsService int32 `xml:"MtsService,omitempty"`

	MegafonService int32 `xml:"MegafonService,omitempty"`

	BeelineService int32 `xml:"BeelineService,omitempty"`

	Tele2Service int32 `xml:"Tele2Service,omitempty"`

	TotalBilledSms int32 `xml:"TotalBilledSms,omitempty"`
}

type ArrayOfMailingListContact struct {
	MailingListContact []*MailingListContact `xml:"MailingListContact,omitempty"`
}

type MailingListContact struct {
	Msid string `xml:"Msid,omitempty"`

	Name string `xml:"Name,omitempty"`

	Attributes *ArrayOfMailingListAttribute `xml:"Attributes,omitempty"`
}

type ArrayOfMailingListAttribute struct {
	MailingListAttribute []*MailingListAttribute `xml:"MailingListAttribute,omitempty"`
}

type MailingListAttribute struct {
	Name string `xml:"Name,omitempty"`

	Value string `xml:"Value,omitempty"`
}

type ArrayOfResultMailingList struct {
	ResultMailingList []*ResultMailingList `xml:"ResultMailingList,omitempty"`
}

type ResultMailingList struct {
	ID int64 `xml:"ID,omitempty"`

	Name string `xml:"Name,omitempty"`
}

type ArrayOfSubscriberGroupInfo struct {
	SubscriberGroupInfo []*SubscriberGroupInfo `xml:"SubscriberGroupInfo,omitempty"`
}

type SubscriberGroupInfo struct {
	ID int64 `xml:"ID,omitempty"`

	Name string `xml:"Name,omitempty"`

	Color int32 `xml:"Color,omitempty"`
}

type ArrayOfUserInfo struct {
	UserInfo []*UserInfo `xml:"UserInfo,omitempty"`
}

type UserInfo struct {
	Name string `xml:"Name,omitempty"`

	Msid string `xml:"Msid,omitempty"`

	Email string `xml:"Email,omitempty"`

	GroupID int64 `xml:"GroupID,omitempty"`

	WebAccessEnabled bool `xml:"WebAccessEnabled,omitempty"`

	AccessLevel *AccessLevel `xml:"AccessLevel,omitempty"`
}

type ArrayOfFormTemplate struct {
	FormTemplate []*FormTemplate `xml:"FormTemplate,omitempty"`
}

type FormTemplate struct {
	ID int64 `xml:"ID,omitempty"`

	Name string `xml:"Name,omitempty"`
}

type ArrayOfForm struct {
	Form []*Form `xml:"Form,omitempty"`
}

type Form struct {
	FormTemplateID int64 `xml:"FormTemplateID,omitempty"`

	Date time.Time `xml:"Date,omitempty"`

	Msid string `xml:"Msid,omitempty"`

	Items *ArrayOfFormItem `xml:"Items,omitempty"`
}

type ArrayOfFormItem struct {
	FormItem []*FormItem `xml:"FormItem,omitempty"`
}

type FormItem struct {
	Key string `xml:"Key,omitempty"`

	Value string `xml:"Value,omitempty"`
}

type StringArray struct {
}

type MTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap interface {
	SendMessage(request *SendMessage) (*SendMessageResponse, error)

	SendMessageContext(ctx context.Context, request *SendMessage) (*SendMessageResponse, error)

	SendMessageAtDate(request *SendMessageAtDate) (*SendMessageAtDateResponse, error)

	SendMessageAtDateContext(ctx context.Context, request *SendMessageAtDate) (*SendMessageAtDateResponse, error)

	SendMessageWithValidityPeriod(request *SendMessageWithValidityPeriod) (*SendMessageWithValidityPeriodResponse, error)

	SendMessageWithValidityPeriodContext(ctx context.Context, request *SendMessageWithValidityPeriod) (*SendMessageWithValidityPeriodResponse, error)

	SendMessageToMultipleSubscribers(request *SendMessageToMultipleSubscribers) (*SendMessageToMultipleSubscribersResponse, error)

	SendMessageToMultipleSubscribersContext(ctx context.Context, request *SendMessageToMultipleSubscribers) (*SendMessageToMultipleSubscribersResponse, error)

	SendMessageToMultipleSubscribersAtDate(request *SendMessageToMultipleSubscribersAtDate) (*SendMessageToMultipleSubscribersAtDateResponse, error)

	SendMessageToMultipleSubscribersAtDateContext(ctx context.Context, request *SendMessageToMultipleSubscribersAtDate) (*SendMessageToMultipleSubscribersAtDateResponse, error)

	SendMessages(request *SendMessages) (*SendMessagesResponse, error)

	SendMessagesContext(ctx context.Context, request *SendMessages) (*SendMessagesResponse, error)

	SendMessagesAtDate(request *SendMessagesAtDate) (*SendMessagesAtDateResponse, error)

	SendMessagesAtDateContext(ctx context.Context, request *SendMessagesAtDate) (*SendMessagesAtDateResponse, error)

	SendMessagesWithValidityPeriod(request *SendMessagesWithValidityPeriod) (*SendMessagesWithValidityPeriodResponse, error)

	SendMessagesWithValidityPeriodContext(ctx context.Context, request *SendMessagesWithValidityPeriod) (*SendMessagesWithValidityPeriodResponse, error)

	SendMessagesAtDateWithValidityPeriod(request *SendMessagesAtDateWithValidityPeriod) (*SendMessagesAtDateWithValidityPeriodResponse, error)

	SendMessagesAtDateWithValidityPeriodContext(ctx context.Context, request *SendMessagesAtDateWithValidityPeriod) (*SendMessagesAtDateWithValidityPeriodResponse, error)

	SendVariousMessages(request *SendVariousMessages) (*SendVariousMessagesResponse, error)

	SendVariousMessagesContext(ctx context.Context, request *SendVariousMessages) (*SendVariousMessagesResponse, error)

	SendViberMessages(request *SendViberMessages) (*SendViberMessagesResponse, error)

	SendViberMessagesContext(ctx context.Context, request *SendViberMessages) (*SendViberMessagesResponse, error)

	SendViberMessagesWithFallback(request *SendViberMessagesWithFallback) (*SendViberMessagesWithFallbackResponse, error)

	SendViberMessagesWithFallbackContext(ctx context.Context, request *SendViberMessagesWithFallback) (*SendViberMessagesWithFallbackResponse, error)

	SendMessagesWithForm(request *SendMessagesWithForm) (*SendMessagesWithFormResponse, error)

	SendMessagesWithFormContext(ctx context.Context, request *SendMessagesWithForm) (*SendMessagesWithFormResponse, error)

	GetMessageStatus(request *GetMessageStatus) (*GetMessageStatusResponse, error)

	GetMessageStatusContext(ctx context.Context, request *GetMessageStatus) (*GetMessageStatusResponse, error)

	GetMessagesStatus(request *GetMessagesStatus) (*GetMessagesStatusResponse, error)

	GetMessagesStatusContext(ctx context.Context, request *GetMessagesStatus) (*GetMessagesStatusResponse, error)

	GetViberMessagesStatus(request *GetViberMessagesStatus) (*GetViberMessagesStatusResponse, error)

	GetViberMessagesStatusContext(ctx context.Context, request *GetViberMessagesStatus) (*GetViberMessagesStatusResponse, error)

	GetMessagesInfo(request *GetMessagesInfo) (*GetMessagesInfoResponse, error)

	GetMessagesInfoContext(ctx context.Context, request *GetMessagesInfo) (*GetMessagesInfoResponse, error)

	GetMessages(request *GetMessages) (*GetMessagesResponse, error)

	GetMessagesContext(ctx context.Context, request *GetMessages) (*GetMessagesResponse, error)

	GetStatistics(request *GetStatistics) (*GetStatisticsResponse, error)

	GetStatisticsContext(ctx context.Context, request *GetStatistics) (*GetStatisticsResponse, error)

	CreateMailingList(request *CreateMailingList) (*CreateMailingListResponse, error)

	CreateMailingListContext(ctx context.Context, request *CreateMailingList) (*CreateMailingListResponse, error)

	GetMailingLists(request *GetMailingLists) (*GetMailingListsResponse, error)

	GetMailingListsContext(ctx context.Context, request *GetMailingLists) (*GetMailingListsResponse, error)

	DeleteMailingLists(request *DeleteMailingLists) (*DeleteMailingListsResponse, error)

	DeleteMailingListsContext(ctx context.Context, request *DeleteMailingLists) (*DeleteMailingListsResponse, error)

	GetMailingListContacts(request *GetMailingListContacts) (*GetMailingListContactsResponse, error)

	GetMailingListContactsContext(ctx context.Context, request *GetMailingListContacts) (*GetMailingListContactsResponse, error)

	SetMailingListContacts(request *SetMailingListContacts) (*SetMailingListContactsResponse, error)

	SetMailingListContactsContext(ctx context.Context, request *SetMailingListContacts) (*SetMailingListContactsResponse, error)

	AddUser(request *AddUser) (*AddUserResponse, error)

	AddUserContext(ctx context.Context, request *AddUser) (*AddUserResponse, error)

	GetGroups(request *GetGroups) (*GetGroupsResponse, error)

	GetGroupsContext(ctx context.Context, request *GetGroups) (*GetGroupsResponse, error)

	GetUsers(request *GetUsers) (*GetUsersResponse, error)

	GetUsersContext(ctx context.Context, request *GetUsers) (*GetUsersResponse, error)

	DeleteUser(request *DeleteUser) (*DeleteUserResponse, error)

	DeleteUserContext(ctx context.Context, request *DeleteUser) (*DeleteUserResponse, error)

	CreateMailing(request *CreateMailing) (*CreateMailingResponse, error)

	CreateMailingContext(ctx context.Context, request *CreateMailing) (*CreateMailingResponse, error)

	GetMailingMessagesStatus(request *GetMailingMessagesStatus) (*GetMailingMessagesStatusResponse, error)

	GetMailingMessagesStatusContext(ctx context.Context, request *GetMailingMessagesStatus) (*GetMailingMessagesStatusResponse, error)

	GetCompanyMode(request *GetCompanyMode) (*GetCompanyModeResponse, error)

	GetCompanyModeContext(ctx context.Context, request *GetCompanyMode) (*GetCompanyModeResponse, error)

	GetBalance(request *GetBalance) (*GetBalanceResponse, error)

	GetBalanceContext(ctx context.Context, request *GetBalance) (*GetBalanceResponse, error)

	GetPartCount(request *GetPartCount) (*GetPartCountResponse, error)

	GetPartCountContext(ctx context.Context, request *GetPartCount) (*GetPartCountResponse, error)

	GetFormTemplates(request *GetFormTemplates) (*GetFormTemplatesResponse, error)

	GetFormTemplatesContext(ctx context.Context, request *GetFormTemplates) (*GetFormTemplatesResponse, error)

	GetForms(request *GetForms) (*GetFormsResponse, error)

	GetFormsContext(ctx context.Context, request *GetForms) (*GetFormsResponse, error)
}

type mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap struct {
	client *soap.Client
}

func NewMTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap(client *soap.Client) MTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap {
	return &mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap{
		client: client,
	}
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageContext(ctx context.Context, request *SendMessage) (*SendMessageResponse, error) {
	response := new(SendMessageResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessage", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessage(request *SendMessage) (*SendMessageResponse, error) {
	return service.SendMessageContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageAtDateContext(ctx context.Context, request *SendMessageAtDate) (*SendMessageAtDateResponse, error) {
	response := new(SendMessageAtDateResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessageAtDate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageAtDate(request *SendMessageAtDate) (*SendMessageAtDateResponse, error) {
	return service.SendMessageAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageWithValidityPeriodContext(ctx context.Context, request *SendMessageWithValidityPeriod) (*SendMessageWithValidityPeriodResponse, error) {
	response := new(SendMessageWithValidityPeriodResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessageWithValidityPeriod", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageWithValidityPeriod(request *SendMessageWithValidityPeriod) (*SendMessageWithValidityPeriodResponse, error) {
	return service.SendMessageWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageToMultipleSubscribersContext(ctx context.Context, request *SendMessageToMultipleSubscribers) (*SendMessageToMultipleSubscribersResponse, error) {
	response := new(SendMessageToMultipleSubscribersResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessageToMultipleSubscribers", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageToMultipleSubscribers(request *SendMessageToMultipleSubscribers) (*SendMessageToMultipleSubscribersResponse, error) {
	return service.SendMessageToMultipleSubscribersContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageToMultipleSubscribersAtDateContext(ctx context.Context, request *SendMessageToMultipleSubscribersAtDate) (*SendMessageToMultipleSubscribersAtDateResponse, error) {
	response := new(SendMessageToMultipleSubscribersAtDateResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessageToMultipleSubscribersAtDate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessageToMultipleSubscribersAtDate(request *SendMessageToMultipleSubscribersAtDate) (*SendMessageToMultipleSubscribersAtDateResponse, error) {
	return service.SendMessageToMultipleSubscribersAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesContext(ctx context.Context, request *SendMessages) (*SendMessagesResponse, error) {
	response := new(SendMessagesResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessages", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessages(request *SendMessages) (*SendMessagesResponse, error) {
	return service.SendMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesAtDateContext(ctx context.Context, request *SendMessagesAtDate) (*SendMessagesAtDateResponse, error) {
	response := new(SendMessagesAtDateResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessagesAtDate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesAtDate(request *SendMessagesAtDate) (*SendMessagesAtDateResponse, error) {
	return service.SendMessagesAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesWithValidityPeriodContext(ctx context.Context, request *SendMessagesWithValidityPeriod) (*SendMessagesWithValidityPeriodResponse, error) {
	response := new(SendMessagesWithValidityPeriodResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessagesWithValidityPeriod", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesWithValidityPeriod(request *SendMessagesWithValidityPeriod) (*SendMessagesWithValidityPeriodResponse, error) {
	return service.SendMessagesWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesAtDateWithValidityPeriodContext(ctx context.Context, request *SendMessagesAtDateWithValidityPeriod) (*SendMessagesAtDateWithValidityPeriodResponse, error) {
	response := new(SendMessagesAtDateWithValidityPeriodResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessagesAtDateWithValidityPeriod", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesAtDateWithValidityPeriod(request *SendMessagesAtDateWithValidityPeriod) (*SendMessagesAtDateWithValidityPeriodResponse, error) {
	return service.SendMessagesAtDateWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendVariousMessagesContext(ctx context.Context, request *SendVariousMessages) (*SendVariousMessagesResponse, error) {
	response := new(SendVariousMessagesResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendVariousMessages", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendVariousMessages(request *SendVariousMessages) (*SendVariousMessagesResponse, error) {
	return service.SendVariousMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendViberMessagesContext(ctx context.Context, request *SendViberMessages) (*SendViberMessagesResponse, error) {
	response := new(SendViberMessagesResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendViberMessages", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendViberMessages(request *SendViberMessages) (*SendViberMessagesResponse, error) {
	return service.SendViberMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendViberMessagesWithFallbackContext(ctx context.Context, request *SendViberMessagesWithFallback) (*SendViberMessagesWithFallbackResponse, error) {
	response := new(SendViberMessagesWithFallbackResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendViberMessagesWithFallback", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendViberMessagesWithFallback(request *SendViberMessagesWithFallback) (*SendViberMessagesWithFallbackResponse, error) {
	return service.SendViberMessagesWithFallbackContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesWithFormContext(ctx context.Context, request *SendMessagesWithForm) (*SendMessagesWithFormResponse, error) {
	response := new(SendMessagesWithFormResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SendMessagesWithForm", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SendMessagesWithForm(request *SendMessagesWithForm) (*SendMessagesWithFormResponse, error) {
	return service.SendMessagesWithFormContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessageStatusContext(ctx context.Context, request *GetMessageStatus) (*GetMessageStatusResponse, error) {
	response := new(GetMessageStatusResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetMessageStatus", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessageStatus(request *GetMessageStatus) (*GetMessageStatusResponse, error) {
	return service.GetMessageStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessagesStatusContext(ctx context.Context, request *GetMessagesStatus) (*GetMessagesStatusResponse, error) {
	response := new(GetMessagesStatusResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetMessagesStatus", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessagesStatus(request *GetMessagesStatus) (*GetMessagesStatusResponse, error) {
	return service.GetMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetViberMessagesStatusContext(ctx context.Context, request *GetViberMessagesStatus) (*GetViberMessagesStatusResponse, error) {
	response := new(GetViberMessagesStatusResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetViberMessagesStatus", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetViberMessagesStatus(request *GetViberMessagesStatus) (*GetViberMessagesStatusResponse, error) {
	return service.GetViberMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessagesInfoContext(ctx context.Context, request *GetMessagesInfo) (*GetMessagesInfoResponse, error) {
	response := new(GetMessagesInfoResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetMessagesInfo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessagesInfo(request *GetMessagesInfo) (*GetMessagesInfoResponse, error) {
	return service.GetMessagesInfoContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessagesContext(ctx context.Context, request *GetMessages) (*GetMessagesResponse, error) {
	response := new(GetMessagesResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetMessages", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMessages(request *GetMessages) (*GetMessagesResponse, error) {
	return service.GetMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetStatisticsContext(ctx context.Context, request *GetStatistics) (*GetStatisticsResponse, error) {
	response := new(GetStatisticsResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetStatistics", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetStatistics(request *GetStatistics) (*GetStatisticsResponse, error) {
	return service.GetStatisticsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) CreateMailingListContext(ctx context.Context, request *CreateMailingList) (*CreateMailingListResponse, error) {
	response := new(CreateMailingListResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/CreateMailingList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) CreateMailingList(request *CreateMailingList) (*CreateMailingListResponse, error) {
	return service.CreateMailingListContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMailingListsContext(ctx context.Context, request *GetMailingLists) (*GetMailingListsResponse, error) {
	response := new(GetMailingListsResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetMailingLists", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMailingLists(request *GetMailingLists) (*GetMailingListsResponse, error) {
	return service.GetMailingListsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) DeleteMailingListsContext(ctx context.Context, request *DeleteMailingLists) (*DeleteMailingListsResponse, error) {
	response := new(DeleteMailingListsResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/DeleteMailingLists", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) DeleteMailingLists(request *DeleteMailingLists) (*DeleteMailingListsResponse, error) {
	return service.DeleteMailingListsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMailingListContactsContext(ctx context.Context, request *GetMailingListContacts) (*GetMailingListContactsResponse, error) {
	response := new(GetMailingListContactsResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetMailingListContacts", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMailingListContacts(request *GetMailingListContacts) (*GetMailingListContactsResponse, error) {
	return service.GetMailingListContactsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SetMailingListContactsContext(ctx context.Context, request *SetMailingListContacts) (*SetMailingListContactsResponse, error) {
	response := new(SetMailingListContactsResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/SetMailingListContacts", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) SetMailingListContacts(request *SetMailingListContacts) (*SetMailingListContactsResponse, error) {
	return service.SetMailingListContactsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) AddUserContext(ctx context.Context, request *AddUser) (*AddUserResponse, error) {
	response := new(AddUserResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/AddUser", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) AddUser(request *AddUser) (*AddUserResponse, error) {
	return service.AddUserContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetGroupsContext(ctx context.Context, request *GetGroups) (*GetGroupsResponse, error) {
	response := new(GetGroupsResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetGroups", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetGroups(request *GetGroups) (*GetGroupsResponse, error) {
	return service.GetGroupsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetUsersContext(ctx context.Context, request *GetUsers) (*GetUsersResponse, error) {
	response := new(GetUsersResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetUsers", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetUsers(request *GetUsers) (*GetUsersResponse, error) {
	return service.GetUsersContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) DeleteUserContext(ctx context.Context, request *DeleteUser) (*DeleteUserResponse, error) {
	response := new(DeleteUserResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/DeleteUser", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) DeleteUser(request *DeleteUser) (*DeleteUserResponse, error) {
	return service.DeleteUserContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) CreateMailingContext(ctx context.Context, request *CreateMailing) (*CreateMailingResponse, error) {
	response := new(CreateMailingResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/CreateMailing", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) CreateMailing(request *CreateMailing) (*CreateMailingResponse, error) {
	return service.CreateMailingContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMailingMessagesStatusContext(ctx context.Context, request *GetMailingMessagesStatus) (*GetMailingMessagesStatusResponse, error) {
	response := new(GetMailingMessagesStatusResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetMailingMessagesStatus", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetMailingMessagesStatus(request *GetMailingMessagesStatus) (*GetMailingMessagesStatusResponse, error) {
	return service.GetMailingMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetCompanyModeContext(ctx context.Context, request *GetCompanyMode) (*GetCompanyModeResponse, error) {
	response := new(GetCompanyModeResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetCompanyMode", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetCompanyMode(request *GetCompanyMode) (*GetCompanyModeResponse, error) {
	return service.GetCompanyModeContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetBalanceContext(ctx context.Context, request *GetBalance) (*GetBalanceResponse, error) {
	response := new(GetBalanceResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetBalance", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetBalance(request *GetBalance) (*GetBalanceResponse, error) {
	return service.GetBalanceContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetPartCountContext(ctx context.Context, request *GetPartCount) (*GetPartCountResponse, error) {
	response := new(GetPartCountResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetPartCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetPartCount(request *GetPartCount) (*GetPartCountResponse, error) {
	return service.GetPartCountContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetFormTemplatesContext(ctx context.Context, request *GetFormTemplates) (*GetFormTemplatesResponse, error) {
	response := new(GetFormTemplatesResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetFormTemplates", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetFormTemplates(request *GetFormTemplates) (*GetFormTemplatesResponse, error) {
	return service.GetFormTemplatesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetFormsContext(ctx context.Context, request *GetForms) (*GetFormsResponse, error) {
	response := new(GetFormsResponse)
	err := service.client.Call("http://mcommunicator.ru/M2M/GetForms", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APISoap) GetForms(request *GetForms) (*GetFormsResponse, error) {
	return service.GetFormsContext(
		context.Background(),
		request,
	)
}

type MTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet interface {
	SendMessage(request *string) (*Long, error)

	SendMessageContext(ctx context.Context, request *string) (*Long, error)

	SendMessageAtDate(request *string) (*Long, error)

	SendMessageAtDateContext(ctx context.Context, request *string) (*Long, error)

	SendMessageWithValidityPeriod(request *string) (*Long, error)

	SendMessageWithValidityPeriodContext(ctx context.Context, request *string) (*Long, error)

	SendMessageToMultipleSubscribers(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessageToMultipleSubscribersContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessageToMultipleSubscribersAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessageToMultipleSubscribersAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessages(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDateWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDateWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	GetMessageStatus(request *string) (*ArrayOfDeliveryInfo, error)

	GetMessageStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error)

	GetMessagesStatus(request *StringArray) (*ArrayOfMessageStatusWithID, error)

	GetMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfMessageStatusWithID, error)

	GetViberMessagesStatus(request *StringArray) (*ArrayOfViberMessageStatusWithID, error)

	GetViberMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfViberMessageStatusWithID, error)

	GetMessagesInfo(request *StringArray) (*ArrayOfMessageInfoExWithID, error)

	GetMessagesInfoContext(ctx context.Context, request *StringArray) (*ArrayOfMessageInfoExWithID, error)

	GetMessages(request *string) (*ArrayOfMessageInfo, error)

	GetMessagesContext(ctx context.Context, request *string) (*ArrayOfMessageInfo, error)

	GetStatistics(request *string) (*StatisticsInfo, error)

	GetStatisticsContext(ctx context.Context, request *string) (*StatisticsInfo, error)

	GetMailingLists(request *string) (*ArrayOfResultMailingList, error)

	GetMailingListsContext(ctx context.Context, request *string) (*ArrayOfResultMailingList, error)

	DeleteMailingLists(request *StringArray) error

	DeleteMailingListsContext(ctx context.Context, request *StringArray) error

	GetMailingListContacts(request *string) (*ArrayOfMailingListContact, error)

	GetMailingListContactsContext(ctx context.Context, request *string) (*ArrayOfMailingListContact, error)

	AddUser(request *string) (*Long, error)

	AddUserContext(ctx context.Context, request *string) (*Long, error)

	GetGroups(request *string) (*ArrayOfSubscriberGroupInfo, error)

	GetGroupsContext(ctx context.Context, request *string) (*ArrayOfSubscriberGroupInfo, error)

	GetUsers(request *string) (*ArrayOfUserInfo, error)

	GetUsersContext(ctx context.Context, request *string) (*ArrayOfUserInfo, error)

	DeleteUser(request *string) error

	DeleteUserContext(ctx context.Context, request *string) error

	CreateMailing(request *string) (*Long, error)

	CreateMailingContext(ctx context.Context, request *string) (*Long, error)

	GetMailingMessagesStatus(request *string) (*ArrayOfDeliveryInfo, error)

	GetMailingMessagesStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error)

	GetCompanyMode(request *string) (*string, error)

	GetCompanyModeContext(ctx context.Context, request *string) (*string, error)

	GetBalance(request *string) (*string, error)

	GetBalanceContext(ctx context.Context, request *string) (*string, error)

	GetPartCount(request *string) (*int, error)

	GetPartCountContext(ctx context.Context, request *string) (*int, error)

	GetFormTemplates(request *string) (*ArrayOfFormTemplate, error)

	GetFormTemplatesContext(ctx context.Context, request *string) (*ArrayOfFormTemplate, error)

	GetForms(request *string) (*ArrayOfForm, error)

	GetFormsContext(ctx context.Context, request *string) (*ArrayOfForm, error)
}

type mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet struct {
	client *soap.Client
}

func NewMTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet(client *soap.Client) MTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet {
	return &mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet{
		client: client,
	}
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessage(request *string) (*Long, error) {
	return service.SendMessageContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageAtDateContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageAtDate(request *string) (*Long, error) {
	return service.SendMessageAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageWithValidityPeriodContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageWithValidityPeriod(request *string) (*Long, error) {
	return service.SendMessageWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageToMultipleSubscribersContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageToMultipleSubscribers(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessageToMultipleSubscribersContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageToMultipleSubscribersAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessageToMultipleSubscribersAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessageToMultipleSubscribersAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessagesContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessages(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessagesAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessagesAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessagesWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessagesWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessagesAtDateWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) SendMessagesAtDateWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesAtDateWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessageStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error) {
	response := new(ArrayOfDeliveryInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessageStatus(request *string) (*ArrayOfDeliveryInfo, error) {
	return service.GetMessageStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfMessageStatusWithID, error) {
	response := new(ArrayOfMessageStatusWithID)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessagesStatus(request *StringArray) (*ArrayOfMessageStatusWithID, error) {
	return service.GetMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetViberMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfViberMessageStatusWithID, error) {
	response := new(ArrayOfViberMessageStatusWithID)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetViberMessagesStatus(request *StringArray) (*ArrayOfViberMessageStatusWithID, error) {
	return service.GetViberMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessagesInfoContext(ctx context.Context, request *StringArray) (*ArrayOfMessageInfoExWithID, error) {
	response := new(ArrayOfMessageInfoExWithID)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessagesInfo(request *StringArray) (*ArrayOfMessageInfoExWithID, error) {
	return service.GetMessagesInfoContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessagesContext(ctx context.Context, request *string) (*ArrayOfMessageInfo, error) {
	response := new(ArrayOfMessageInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMessages(request *string) (*ArrayOfMessageInfo, error) {
	return service.GetMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetStatisticsContext(ctx context.Context, request *string) (*StatisticsInfo, error) {
	response := new(StatisticsInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetStatistics(request *string) (*StatisticsInfo, error) {
	return service.GetStatisticsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMailingListsContext(ctx context.Context, request *string) (*ArrayOfResultMailingList, error) {
	response := new(ArrayOfResultMailingList)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMailingLists(request *string) (*ArrayOfResultMailingList, error) {
	return service.GetMailingListsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) DeleteMailingListsContext(ctx context.Context, request *StringArray) error {

	err := service.client.Call("", request, struct{}{})
	if err != nil {
		return err
	}

	return nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) DeleteMailingLists(request *StringArray) error {
	return service.DeleteMailingListsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMailingListContactsContext(ctx context.Context, request *string) (*ArrayOfMailingListContact, error) {
	response := new(ArrayOfMailingListContact)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMailingListContacts(request *string) (*ArrayOfMailingListContact, error) {
	return service.GetMailingListContactsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) AddUserContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) AddUser(request *string) (*Long, error) {
	return service.AddUserContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetGroupsContext(ctx context.Context, request *string) (*ArrayOfSubscriberGroupInfo, error) {
	response := new(ArrayOfSubscriberGroupInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetGroups(request *string) (*ArrayOfSubscriberGroupInfo, error) {
	return service.GetGroupsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetUsersContext(ctx context.Context, request *string) (*ArrayOfUserInfo, error) {
	response := new(ArrayOfUserInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetUsers(request *string) (*ArrayOfUserInfo, error) {
	return service.GetUsersContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) DeleteUserContext(ctx context.Context, request *string) error {

	err := service.client.Call("", request, struct{}{})
	if err != nil {
		return err
	}

	return nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) DeleteUser(request *string) error {
	return service.DeleteUserContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) CreateMailingContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) CreateMailing(request *string) (*Long, error) {
	return service.CreateMailingContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMailingMessagesStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error) {
	response := new(ArrayOfDeliveryInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetMailingMessagesStatus(request *string) (*ArrayOfDeliveryInfo, error) {
	return service.GetMailingMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetCompanyModeContext(ctx context.Context, request *string) (*string, error) {
	response := new(string)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetCompanyMode(request *string) (*string, error) {
	return service.GetCompanyModeContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetBalanceContext(ctx context.Context, request *string) (*string, error) {
	response := new(string)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetBalance(request *string) (*string, error) {
	return service.GetBalanceContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetPartCountContext(ctx context.Context, request *string) (*int, error) {
	response := new(int)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetPartCount(request *string) (*int, error) {
	return service.GetPartCountContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetFormTemplatesContext(ctx context.Context, request *string) (*ArrayOfFormTemplate, error) {
	response := new(ArrayOfFormTemplate)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetFormTemplates(request *string) (*ArrayOfFormTemplate, error) {
	return service.GetFormTemplatesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetFormsContext(ctx context.Context, request *string) (*ArrayOfForm, error) {
	response := new(ArrayOfForm)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpGet) GetForms(request *string) (*ArrayOfForm, error) {
	return service.GetFormsContext(
		context.Background(),
		request,
	)
}

type MTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost interface {
	SendMessage(request *string) (*Long, error)

	SendMessageContext(ctx context.Context, request *string) (*Long, error)

	SendMessageAtDate(request *string) (*Long, error)

	SendMessageAtDateContext(ctx context.Context, request *string) (*Long, error)

	SendMessageWithValidityPeriod(request *string) (*Long, error)

	SendMessageWithValidityPeriodContext(ctx context.Context, request *string) (*Long, error)

	SendMessageToMultipleSubscribers(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessageToMultipleSubscribersContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessageToMultipleSubscribersAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessageToMultipleSubscribersAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessages(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDateWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error)

	SendMessagesAtDateWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error)

	GetMessageStatus(request *string) (*ArrayOfDeliveryInfo, error)

	GetMessageStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error)

	GetMessagesStatus(request *StringArray) (*ArrayOfMessageStatusWithID, error)

	GetMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfMessageStatusWithID, error)

	GetViberMessagesStatus(request *StringArray) (*ArrayOfViberMessageStatusWithID, error)

	GetViberMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfViberMessageStatusWithID, error)

	GetMessagesInfo(request *StringArray) (*ArrayOfMessageInfoExWithID, error)

	GetMessagesInfoContext(ctx context.Context, request *StringArray) (*ArrayOfMessageInfoExWithID, error)

	GetMessages(request *string) (*ArrayOfMessageInfo, error)

	GetMessagesContext(ctx context.Context, request *string) (*ArrayOfMessageInfo, error)

	GetStatistics(request *string) (*StatisticsInfo, error)

	GetStatisticsContext(ctx context.Context, request *string) (*StatisticsInfo, error)

	GetMailingLists(request *string) (*ArrayOfResultMailingList, error)

	GetMailingListsContext(ctx context.Context, request *string) (*ArrayOfResultMailingList, error)

	DeleteMailingLists(request *StringArray) error

	DeleteMailingListsContext(ctx context.Context, request *StringArray) error

	GetMailingListContacts(request *string) (*ArrayOfMailingListContact, error)

	GetMailingListContactsContext(ctx context.Context, request *string) (*ArrayOfMailingListContact, error)

	AddUser(request *string) (*Long, error)

	AddUserContext(ctx context.Context, request *string) (*Long, error)

	GetGroups(request *string) (*ArrayOfSubscriberGroupInfo, error)

	GetGroupsContext(ctx context.Context, request *string) (*ArrayOfSubscriberGroupInfo, error)

	GetUsers(request *string) (*ArrayOfUserInfo, error)

	GetUsersContext(ctx context.Context, request *string) (*ArrayOfUserInfo, error)

	DeleteUser(request *string) error

	DeleteUserContext(ctx context.Context, request *string) error

	CreateMailing(request *string) (*Long, error)

	CreateMailingContext(ctx context.Context, request *string) (*Long, error)

	GetMailingMessagesStatus(request *string) (*ArrayOfDeliveryInfo, error)

	GetMailingMessagesStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error)

	GetCompanyMode(request *string) (*string, error)

	GetCompanyModeContext(ctx context.Context, request *string) (*string, error)

	GetBalance(request *string) (*string, error)

	GetBalanceContext(ctx context.Context, request *string) (*string, error)

	GetPartCount(request *string) (*int, error)

	GetPartCountContext(ctx context.Context, request *string) (*int, error)

	GetFormTemplates(request *string) (*ArrayOfFormTemplate, error)

	GetFormTemplatesContext(ctx context.Context, request *string) (*ArrayOfFormTemplate, error)

	GetForms(request *string) (*ArrayOfForm, error)

	GetFormsContext(ctx context.Context, request *string) (*ArrayOfForm, error)
}

type mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost struct {
	client *soap.Client
}

func NewMTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost(client *soap.Client) MTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost {
	return &mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost{
		client: client,
	}
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessage(request *string) (*Long, error) {
	return service.SendMessageContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageAtDateContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageAtDate(request *string) (*Long, error) {
	return service.SendMessageAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageWithValidityPeriodContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageWithValidityPeriod(request *string) (*Long, error) {
	return service.SendMessageWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageToMultipleSubscribersContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageToMultipleSubscribers(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessageToMultipleSubscribersContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageToMultipleSubscribersAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessageToMultipleSubscribersAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessageToMultipleSubscribersAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessagesContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessages(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessagesAtDateContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessagesAtDate(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesAtDateContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessagesWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessagesWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessagesAtDateWithValidityPeriodContext(ctx context.Context, request *StringArray) (*ArrayOfSendMessageIDs, error) {
	response := new(ArrayOfSendMessageIDs)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) SendMessagesAtDateWithValidityPeriod(request *StringArray) (*ArrayOfSendMessageIDs, error) {
	return service.SendMessagesAtDateWithValidityPeriodContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessageStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error) {
	response := new(ArrayOfDeliveryInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessageStatus(request *string) (*ArrayOfDeliveryInfo, error) {
	return service.GetMessageStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfMessageStatusWithID, error) {
	response := new(ArrayOfMessageStatusWithID)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessagesStatus(request *StringArray) (*ArrayOfMessageStatusWithID, error) {
	return service.GetMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetViberMessagesStatusContext(ctx context.Context, request *StringArray) (*ArrayOfViberMessageStatusWithID, error) {
	response := new(ArrayOfViberMessageStatusWithID)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetViberMessagesStatus(request *StringArray) (*ArrayOfViberMessageStatusWithID, error) {
	return service.GetViberMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessagesInfoContext(ctx context.Context, request *StringArray) (*ArrayOfMessageInfoExWithID, error) {
	response := new(ArrayOfMessageInfoExWithID)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessagesInfo(request *StringArray) (*ArrayOfMessageInfoExWithID, error) {
	return service.GetMessagesInfoContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessagesContext(ctx context.Context, request *string) (*ArrayOfMessageInfo, error) {
	response := new(ArrayOfMessageInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMessages(request *string) (*ArrayOfMessageInfo, error) {
	return service.GetMessagesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetStatisticsContext(ctx context.Context, request *string) (*StatisticsInfo, error) {
	response := new(StatisticsInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetStatistics(request *string) (*StatisticsInfo, error) {
	return service.GetStatisticsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMailingListsContext(ctx context.Context, request *string) (*ArrayOfResultMailingList, error) {
	response := new(ArrayOfResultMailingList)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMailingLists(request *string) (*ArrayOfResultMailingList, error) {
	return service.GetMailingListsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) DeleteMailingListsContext(ctx context.Context, request *StringArray) error {

	err := service.client.Call("", request, struct{}{})
	if err != nil {
		return err
	}

	return nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) DeleteMailingLists(request *StringArray) error {
	return service.DeleteMailingListsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMailingListContactsContext(ctx context.Context, request *string) (*ArrayOfMailingListContact, error) {
	response := new(ArrayOfMailingListContact)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMailingListContacts(request *string) (*ArrayOfMailingListContact, error) {
	return service.GetMailingListContactsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) AddUserContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) AddUser(request *string) (*Long, error) {
	return service.AddUserContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetGroupsContext(ctx context.Context, request *string) (*ArrayOfSubscriberGroupInfo, error) {
	response := new(ArrayOfSubscriberGroupInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetGroups(request *string) (*ArrayOfSubscriberGroupInfo, error) {
	return service.GetGroupsContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetUsersContext(ctx context.Context, request *string) (*ArrayOfUserInfo, error) {
	response := new(ArrayOfUserInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetUsers(request *string) (*ArrayOfUserInfo, error) {
	return service.GetUsersContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) DeleteUserContext(ctx context.Context, request *string) error {

	err := service.client.Call("", request, struct{}{})
	if err != nil {
		return err
	}

	return nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) DeleteUser(request *string) error {
	return service.DeleteUserContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) CreateMailingContext(ctx context.Context, request *string) (*Long, error) {
	response := new(Long)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) CreateMailing(request *string) (*Long, error) {
	return service.CreateMailingContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMailingMessagesStatusContext(ctx context.Context, request *string) (*ArrayOfDeliveryInfo, error) {
	response := new(ArrayOfDeliveryInfo)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetMailingMessagesStatus(request *string) (*ArrayOfDeliveryInfo, error) {
	return service.GetMailingMessagesStatusContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetCompanyModeContext(ctx context.Context, request *string) (*string, error) {
	response := new(string)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetCompanyMode(request *string) (*string, error) {
	return service.GetCompanyModeContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetBalanceContext(ctx context.Context, request *string) (*string, error) {
	response := new(string)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetBalance(request *string) (*string, error) {
	return service.GetBalanceContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetPartCountContext(ctx context.Context, request *string) (*int, error) {
	response := new(int)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetPartCount(request *string) (*int, error) {
	return service.GetPartCountContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetFormTemplatesContext(ctx context.Context, request *string) (*ArrayOfFormTemplate, error) {
	response := new(ArrayOfFormTemplate)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetFormTemplates(request *string) (*ArrayOfFormTemplate, error) {
	return service.GetFormTemplatesContext(
		context.Background(),
		request,
	)
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetFormsContext(ctx context.Context, request *string) (*ArrayOfForm, error) {
	response := new(ArrayOfForm)
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_APIHttpPost) GetForms(request *string) (*ArrayOfForm, error) {
	return service.GetFormsContext(
		context.Background(),
		request,
	)
}
